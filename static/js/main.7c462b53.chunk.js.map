{"version":3,"sources":["App.jsx","index.js"],"names":["useStyles","makeStyles","button","height","contained","ExcelUploader","setWorkbook","setFilename","classes","useState","text","setText","Grid","container","spacing","item","xs","FilledInput","value","inputProps","style","padding","readOnly","disableUnderline","fullWidth","Button","variant","component","className","type","accept","onChange","event","target","files","length","file","name","reader","FileReader","onload","array_buffer","result","workbook","XLSX","read","readAsArrayBuffer","hidden","SheetSelector","sheets","selectedSheetName","setSelectedSheetName","finalSelectedSheet","includes","useEffect","undefined","FormControl","InputLabel","id","Select","labelId","label","disabled","MenuItem","map","sheet","index","ColumnSelector","columns","selectedColumns","setSelectedColumns","multiple","column","table_header_getter","this","columns_map","Map","console","log","cached_columns","get","range","utils","decode_range","c","s","e","cell","encode_cell","r","w","push","set","App","filename","Sheets","Container","Stack","SheetNames","onClick","JSON","stringify","v","replace","_","p1","p2","arabic_number","nzhcn","decodeS","toString","padStart","convertSheet","binary","write","blob","Blob","url","URL","createObjectURL","a","document","createElement","display","href","download","body","appendChild","click","removeChild","revokeObjectURL","some","x","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7c462b53.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Stack from \"@material-ui/core/Stack\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport XLSX from \"xlsx\";\r\nimport nzhcn from \"nzh/cn\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        height: '100%',\r\n        contained: true,\r\n    }\r\n});\r\n\r\nfunction ExcelUploader({setWorkbook, setFilename}) {\r\n    const classes = useStyles();\r\n    const [text, setText] = useState(\"选择要转换的Excel文件\");\r\n\r\n    const uploadExcel = (event) => {\r\n        if (event.target.files.length === 0) {\r\n            return;\r\n        }\r\n        const file = event.target.files[0];\r\n        setFilename(file.name);\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n            const array_buffer = event.target.result;\r\n            const workbook = XLSX.read(array_buffer, {type: 'array'});\r\n            setText(`${file.name} 上传完毕`);\r\n            setWorkbook(workbook);\r\n        };\r\n        setText(`${file.name} 上传中...`);\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={10}>\r\n                <FilledInput value={text} inputProps={{ style: { padding: '16.5px 14px' } }} readOnly disableUnderline fullWidth />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n                <Button variant=\"contained\" component=\"label\" className={classes.button} fullWidth>\r\n                    上传\r\n                    <input type=\"file\" accept=\".xls,.xlsx\" onChange={uploadExcel} hidden />\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction SheetSelector({sheets, onChange}) {\r\n    const [selectedSheetName, setSelectedSheetName] = useState();\r\n    const finalSelectedSheet= sheets.includes(selectedSheetName) ? selectedSheetName : sheets[0];\r\n\r\n    useEffect(() => {\r\n        if (selectedSheetName !== finalSelectedSheet) {\r\n            setSelectedSheetName(finalSelectedSheet);\r\n        }\r\n    }, [selectedSheetName, finalSelectedSheet]);\r\n\r\n    useEffect(() => {\r\n        if (finalSelectedSheet !== undefined) {\r\n            onChange(finalSelectedSheet);\r\n        }\r\n    }, [finalSelectedSheet, onChange]);\r\n\r\n    if (finalSelectedSheet === undefined) {\r\n        return (\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"sheet-select-label\">工作表</InputLabel>\r\n                <Select labelId=\"sheet-select-label\" label=\"工作表\" value=\"dummy\" disabled>\r\n                    <MenuItem value=\"dummy\" key={0}>没有有效的工作表，请先上传合法的Excel文件</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <FormControl fullWidth>\r\n            <InputLabel id=\"sheet-select-label\">工作表</InputLabel>\r\n            <Select labelId=\"sheet-select-label\" label=\"工作表\" value={finalSelectedSheet} onChange={(event) => setSelectedSheetName(event.target.value)}>\r\n                {sheets.map((sheet, index) => <MenuItem value={sheet} key={index}>{sheet}</MenuItem>)}\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nfunction ColumnSelector({columns, onChange}) {\r\n    const [selectedColumns, setSelectedColumns] = useState([]);\r\n\r\n    useEffect(() => {\r\n        onChange(selectedColumns);\r\n    }, [onChange, selectedColumns]);\r\n\r\n    if (columns.length === 0) {\r\n        return (\r\n            <FormControl>\r\n                <InputLabel id=\"column-select-label\">要转换的列</InputLabel>\r\n                <Select labelId=\"column-select-label\" label=\"要转换的列\" multiple value={[\"dummy\"]} disabled>\r\n                    <MenuItem value=\"dummy\" key={0}>没有可用的列，请先选择可用的工作表</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <FormControl>\r\n            <InputLabel id=\"column-select-label\">要转换的列</InputLabel>\r\n            <Select labelId=\"column-select-label\" label=\"要转换的列\" multiple value={selectedColumns} onChange={(event) => setSelectedColumns(event.target.value)}>\r\n                {columns.map((column) => <MenuItem value={column} key={column.id}>{column.text}</MenuItem>)}\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nclass TableHeaderGetter {\r\n    constructor() {\r\n        this.columns_map = new Map();\r\n    }\r\n\r\n    get(sheet) {\r\n        console.log('start getting table headers');\r\n        const cached_columns = this.columns_map.get(sheet);\r\n        if (cached_columns !== undefined) {\r\n            console.log('Cached!', cached_columns);\r\n            return cached_columns;\r\n        }\r\n        \r\n        console.log('Missed cache!', sheet);\r\n        const columns = [];\r\n        const range = XLSX.utils.decode_range(sheet['!ref']);\r\n        for (let c = range.s.c; c <= range.e.c; ++c) {\r\n            const cell_ref = XLSX.utils.encode_cell({c, r: range.s.r});\r\n            const cell = sheet[cell_ref];\r\n            if (cell !== undefined && cell.w !== undefined) {\r\n                columns.push({id: c, text: cell.w});\r\n            }\r\n        }\r\n        console.log('Result', columns);\r\n        this.columns_map.set(sheet, columns);\r\n        return columns;\r\n    }\r\n}\r\nconst table_header_getter = new TableHeaderGetter();\r\n\r\nfunction convertChineseNumToArabic(str) {\r\n    const re = /(^.*?)([零一二三四五六七八九十百千万]+)店$/u;\r\n    const replace = (_, p1, p2) => {\r\n        const arabic_number = nzhcn.decodeS(p2);\r\n        return `${p1}${arabic_number.toString().padStart(2, '0')}店`;\r\n    }\r\n    return str.replace(re, replace);\r\n}\r\n\r\nfunction convertSheet(sheet, columns) {\r\n    const range = XLSX.utils.decode_range(sheet['!ref']);\r\n    for (let column of columns) {\r\n        console.log(`Converting column ${JSON.stringify(column)}`);\r\n        for (let r = range.s.r + 1; r <= range.e.r; ++r) {\r\n            const cell_ref = XLSX.utils.encode_cell({c: column.id, r});\r\n            const cell = sheet[cell_ref];\r\n            if (cell !== undefined && cell.w !== undefined) {\r\n                cell.v = convertChineseNumToArabic(cell.w)\r\n                console.log(`${cell.w} -> ${cell.v}`);\r\n                delete cell.w;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const [filename, setFilename] = useState();\r\n    const [workbook, setWorkbook] = useState();\r\n    const [selectedSheetName, setSelectedSheetName] = useState();\r\n    const [selectedColumns, setSelectedColumns] = useState([]);\r\n\r\n    const columns = selectedSheetName === undefined ? [] : table_header_getter.get(workbook.Sheets[selectedSheetName]);\r\n\r\n    const convertAndDownload = () => {\r\n        console.log(selectedSheetName);\r\n        const sheet = workbook.Sheets[selectedSheetName];\r\n        convertSheet(sheet, selectedColumns);\r\n        const binary = XLSX.write(workbook, { type: 'array' });\r\n        const blob = new Blob([binary], { type: 'application/vnd.ms-excel'});\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        const a = document.createElement('a');\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.target = '_blank';\r\n        a.download= filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Stack spacing={2}>\r\n                <ExcelUploader setWorkbook={setWorkbook} setFilename={setFilename}/>\r\n                <SheetSelector sheets={workbook === undefined ? [] : workbook.SheetNames} onChange={setSelectedSheetName} />\r\n                <ColumnSelector columns={columns} onChange={setSelectedColumns} />\r\n                <Button variant=\"contained\" onClick={convertAndDownload} disabled={[workbook, selectedSheetName, selectedColumns].some((x) => x === undefined)}>转换并下载</Button>\r\n            </Stack>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}